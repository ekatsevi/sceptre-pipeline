# in R
all(pairs_df$gene_id %in% get_feature_ids(gene_modality))
args <- "multimodal_metadata_fp gene_odm_fp grna_odm_fp pair_fp ~p_mito+batch+log(gene_n_nonzero)+log(gene_n_umis)+log(grna_expression_n_nonzero)+log(grna_expression_n_umis) 3 1000 both 25 gene grna_expression 5 5 10" |> .split_args()
args
l
multimodal_metadata_fp <- args[1] # multimodal metadata fp
gene_odm_fp <- args[2] # gene ODM backing file
grna_odm_fp <- args[3] # grna ODM backing file
pair_fp <- args[4] # pairs df
form <- args[5] # formula string
threshold <- as.integer(args[6]) # threshold
B <- as.integer(args[7]) # B
side <- args[8] # sidedness
n_pairs_to_sample <- as.integer(args[9]) # n pairs
gene_modality_name <- args[10] # gene modality name
grna_modality_name <- args[11] # grna modality name
gene_pod_size <- max(as.integer(args[12]), 2) # gene pod size
grna_group_pod_size <- max(as.integer(args[13]), 2) # grna group pod size
pair_pod_size <- max(as.integer(args[14]), 2) # pair pod size
# load ondisc
library(ondisc)
# create the multimodal odm
mm_odm <- read_multimodal_odm(c(gene_odm_fp, grna_odm_fp), multimodal_metadata_fp)
read_multimodal_odm
multimodal_metadata_fp <- args[1] # multimodal metadata fp
gene_odm_fp <- args[2] # gene ODM backing file
grna_odm_fp <- args[3] # grna ODM backing file
pair_fp <- args[4] # pairs df
form <- args[5] # formula string
threshold <- as.integer(args[6]) # threshold
B <- as.integer(args[7]) # B
side <- args[8] # sidedness
n_pairs_to_sample <- as.integer(args[9]) # n pairs
gene_modality_name <- args[10] # gene modality name
grna_modality_name <- args[11] # grna modality name
gene_pod_size <- max(as.integer(args[12]), 2) # gene pod size
grna_group_pod_size <- max(as.integer(args[13]), 2) # grna group pod size
pair_pod_size <- max(as.integer(args[14]), 2) # pair pod size
# load ondisc
library(ondisc)
# create the multimodal odm
mm_odm <- read_multimodal_odm(c(gene_odm_fp, grna_odm_fp), multimodal_metadata_fp)
multimodal_metadata_fp
200000/150
200000/200
200000 / 1000
1000 * 5
(1000 * 5)/60^2
100 * 30
(100 * 30)/60^2
100 * 30
1000 * 5
200000/1000
df <- data.frame(x = rnorm(10), y = runif(10), batch = factor(1))
df
df$batch
model.matrix(df, as.formula(~x + y + batch))
model.matrix(df, formula(~x + y + batch))
model.matrix(object = forula(~x + y + batch), )
model.matrix(object = formula(~x + y + batch), )
model.matrix(object = formula(~x + y + batch), df)
model.matrix(object = formula(~x + y), df)
sceptre_result <- readRDS("/Users/timbarry/research_code/sceptre2-manuscript/pipeline_launch_scripts/high_moi/sceptre_result.rds")
setwd("/Users/timbarry/research_offsite/work/5a/a500be48bf2df1040fe5c6b2d52126
")
setwd("/Users/timbarry/research_offsite/work/5a/a500be48bf2df1040fe5c6b2d52126")
"gene multimodal_metadata_fp gene_odm_fp gene_to_pod_id_map 10 3 crt" |> .split_args() -> args
modality_name <- args[1] # modality name ("gene" or "grna")
multimodal_metadata_fp <- args[2] # multimodal fp
gene_odm_fp <- args[3] # gene odm fp
pod_id_map <- args[4] # modality to pod id map
pod_id <- as.integer(args[5]) # pod id (integer)
threshold <- as.integer(args[6]) # threshold
modality_name
multimodal_metadata_fp
gene_odm_fp
pod_id_map
pod_id
threshold
# load ondisc
library(ondisc)
##############################
# PREPARE DATA AND HYPERPARAMS
##############################
ids <- readRDS(pod_id_map) |>
dplyr::filter(pod_id == !!pod_id) |>
dplyr::pull(id)
mm_odm <- read_multimodal_odm(gene_odm_fp, multimodal_metadata_fp)
modality_odm <- get_modality(mm_odm, modality_name)
global_cell_covariates <- get_cell_covariates(mm_odm)
rm(mm_odm)
id <- ids[1]
ids
id
print(paste0("Regressing gene ", id, " onto covariates."))
# load expression data
expressions <- as.numeric(modality_odm[[id,]])
# regress expressions onto technical factors
precomp <- sceptre:::run_gene_precomputation_v2(expressions = expressions,
covariate_matrix = global_cell_covariates)
args
inference_method <- args[7] # inference method, either "crt" or "gcm"
inference_method
# load ondisc
library(ondisc)
##############################
# PREPARE DATA AND HYPERPARAMS
##############################
ids <- readRDS(pod_id_map) |>
dplyr::filter(pod_id == !!pod_id) |>
dplyr::pull(id)
ids
?switch
fam <- switch(inference_method,
crt = "nb",
gcm = "poisson")
fam
fam <- switch("inference_method"hi,
crt = "nb",
gcm = "poisson")
fam <- switch("hi",
crt = "nb",
gcm = "poisson")
fam
fam <- switch(inference_method,
crt = "nb",
gcm = "poisson",
stop())
fam
fam <- switch("hey",
crt = "nb",
gcm = "poisson",
stop())
fam <- switch(inference_method,
crt = "nb",
gcm = "poisson",
stop("Inference method not recognized"))
fam
# regress expressions onto technical factors
precomp <- sceptre:::run_gene_precomputation_v2(expressions = expressions,
covariate_matrix = global_cell_covariates,
fam = fam)
precomp
inference_method <- "gcm"
fam <- switch(inference_method,
crt = "nb",
gcm = "poisson",
stop("Inference method not recognized"))
fam
# regress expressions onto technical factors
precomp <- sceptre:::run_gene_precomputation_v2(expressions = expressions,
covariate_matrix = global_cell_covariates,
fam = fam)
precomp
precomp
# regress expressions onto technical factors
precomp <- sceptre:::run_gene_precomputation_v2(expressions = expressions,
covariate_matrix = global_cell_covariates,
fam = fam)
precomp
####################################
# ITERATE AND PERFORM PRECOMPUTATION
####################################
precomp_sub_matrix <- sapply(X = ids, FUN = function(id) {
if (modality_name == "gene") {
print(paste0("Regressing gene ", id, " onto covariates."))
# load expression data
expressions <- as.numeric(modality_odm[[id,]])
# regress expressions onto technical factors
precomp <- sceptre:::run_gene_precomputation_v2(expressions = expressions,
covariate_matrix = global_cell_covariates,
fam = fam)
} else if (modality_name == "grna") {
print(paste0("Regressing gRNA group ", id, " onto covariates."))
# load data
indicators <- ondisc::load_thresholded_and_grouped_grna(covariate_odm = modality_odm,
grna_group = id,
threshold = threshold) |> as.integer()
# fit model
precomp <- sceptre:::run_grna_precomputation_v2(indicators = indicators,
covariate_matrix = global_cell_covariates)
} else {
stop("Modality name not recognized.")
}
}) |> t() |> data.table::as.data.table() |> dplyr::mutate(id = ids)
precomp_sub_matrix
setwd("/Users/timbarry/research_offsite/work/5a/a500be48bf2df1040fe5c6b2d52126")
getwd()
setwd("/Users/timbarry/research_offsite/work/cf/b9279585b0c97258607e929626f37a")
args <- "multimodal_metadata_fp gene_odm_fp grna_odm_fp gene_precomp_matrix_fp grna_precomp_matrix_fp pair_to_pod_id_map 5 3 1000 both true 10 gcm" |> .split_args() -> args
args
multimodal_metadata_fp <- args[1] # multimodal metadata fp
gene_odm_fp <- args[2] # gene odm fp
grna_odm_fp <- args[3] # grna odm fp
gene_precomp_matrix_fp <- args[4] # gene precomp matrix fp
grna_precomp_matrix_fp <- args[5] # grna precomp matrix fp
pair_to_pod_id_map_fp <- args[6] # pair to pod id map fp
pod_id <- as.integer(args[7]) # the pod id
threshold <- as.integer(args[8]) # threshold
B <- as.integer(args[9]) # B
side <- args[10] # sidedness of test
full_output <- as.logical(args[11]) # full_output
full_output
side
B
full_output
inference_method <- args[12]
inference_method
args
args[12] <- args[13]
args
inference_method <- args[12]
inference_method
# obtain the pairs to analyze and prepare data
pairs_to_analyze <- readRDS(pair_to_pod_id_map_fp) |>
dplyr::filter(pod_id == !!pod_id) |>
dplyr::select(gene_id, grna_group)
gene_ids <- as.character(pairs_to_analyze$gene_id)
grna_group_ids <- as.character(pairs_to_analyze$grna_group)
n_pairs <- nrow(pairs_to_analyze)
rm(pairs_to_analyze)
mm_odm <- read_multimodal_odm(c(gene_odm_fp, grna_odm_fp), multimodal_metadata_fp)
gene_odm <- mm_odm |> get_modality("gene")
grna_odm <- mm_odm |> get_modality("grna")
global_cell_covariates <- mm_odm |> get_cell_covariates() |> as.matrix()
rm(mm_odm)
###########################################################
# Iterate over pairs and apply pairwise test of association
###########################################################
binomial_obj <- binomial()
out_l <- vector(mode = "list", length = n_pairs)
i <- 1
gene_id <- gene_ids[i]
grna_group_id <- grna_group_ids[i]
print(paste0("Testing gene ", gene_id, " and gRNA group ", grna_group_id, "."))
i == 1 || gene_ids[i] != gene_ids[i - 1]
# get fitted means and theta (if applicable)
gene_precomp <- fst::read_fst(gene_precomp_matrix_fp, gene_id) |> dplyr::pull()
gene_precomp
length(gene_precomp)
gene_fitted_coefs <- gene_precomp[-length(gene_precomp)]
gene_theta <- gene_precomp[length(gene_precomp)]
gene_fitted_linear_components <- (global_cell_covariates %*% gene_fitted_coefs)[,1]
gene_fitted_coefs
gene_theta
inference_method
global_cell_covariates %*% gene_fitted_coefs
global_cell_covariates
dim(global_cell_covariates)
# get fitted means and theta (if applicable)
gene_precomp <- fst::read_fst(gene_precomp_matrix_fp, gene_id) |> dplyr::pull()
length(gene_precomp)
gene_means <- (global_cell_covariates %*% gene_precomp)[,1]
heaD(gene_means)
head(gene_means)
length(gene_means)
hist(gene_means)
gene_means <- exp((global_cell_covariates %*% gene_precomp)[,1])
gene_means
head(gene_means)
min(gene_means)
max(gene_means)
gene_means
hist(gene_means)
# get expressions
gene_expressions <- as.numeric(gene_odm[[gene_id,]])
gene_expressions
gene_expressions
gene_means
# get fitted means
grna_group_fitted_coefs <- fst::read_fst(grna_precomp_matrix_fp, grna_group_id) |> dplyr::pull()
grna_group_fitted_means <- binomial_obj$linkinv((global_cell_covariates %*% grna_group_fitted_coefs)[,1])
# get indicators
grna_group_indicators <- ondisc::load_thresholded_and_grouped_grna(covariate_odm = grna_odm,
grna_group = grna_group_id,
threshold = threshold) |> as.integer()
grna_group_indicators
length(grna_group_indicators)
length(grna_group_fitted_means)
grna_group_fitted_coefs
grna_group_fitted_means
head(grna_group_fitted_means)
head(grna_group_fitted_coefs)
head(grna_group_indicators)
# get fitted means and theta (if applicable)
gene_precomp <- fst::read_fst(gene_precomp_matrix_fp, gene_id) |> dplyr::pull()
if (inference_method == "gcm") {
gene_means <- exp((global_cell_covariates %*% gene_precomp)[,1])
} else { # dcrt
gene_fitted_coefs <- gene_precomp[-length(gene_precomp)]
gene_theta <- gene_precomp[length(gene_precomp)]
gene_fitted_linear_components <- (global_cell_covariates %*% gene_fitted_coefs)[,1]
}
# get expressions
gene_expressions <- as.numeric(gene_odm[[gene_id,]])
# Load grna indicators and fitted means (if necessary)
if (i == 1 || grna_group_ids[i] != grna_group_ids[i - 1]) {
# get fitted means
grna_group_fitted_coefs <- fst::read_fst(grna_precomp_matrix_fp, grna_group_id) |> dplyr::pull()
grna_group_fitted_means <- binomial_obj$linkinv((global_cell_covariates %*% grna_group_fitted_coefs)[,1])
# get indicators
grna_group_indicators <- ondisc::load_thresholded_and_grouped_grna(covariate_odm = grna_odm,
grna_group = grna_group_id,
threshold = threshold) |> as.integer()
# sample the sparse matrix of grna presences/absences
if (inference_method == "crt") {
synthetic_indicator_matrix <- sceptre:::generate_synthetic_grna_data(fitted_probs = grna_group_fitted_means, B = B)
}
}
grna_group_fitted_coefs
grna_group_fitted_means
head(grna_group_indicators)
min(grna_group_fitted_means)
max(grna_group_fitted_means)
gene_resids <- gene_expressions - gene_means
head(gene_resids)
hist(gene_resids)
gene_fitted_means <- exp((global_cell_covariates %*% gene_precomp)[,1])
gene_resids <- gene_expressions - gene_fitted_means
grna_group_resids <- grna_group_indicators - grna_group_fitted_means
gene_resids
grna_group_resids
hist(grna_group_resids)
hist(gene_resids)
hist(grna_group_resids)
grna_group_indicators
grna_group_fitted_means
gene_resids
grna_group_resids
gene_resids
grna_group_resids
side
gene_resids
grna_group_resids
detach("sceptre")
detach(sceptre)
library(sceptre)
load_all("~/research_code/sceptre/")
sceptre:::run_sceptre_using_gcm
out <- sceptre:::run_sceptre_using_gcm(gene_resids,
grna_group_resids,
side)
out
multimodal_metadata_fp <- args[1] # multimodal metadata fp
gene_odm_fp <- args[2] # gene odm fp
grna_odm_fp <- args[3] # grna odm fp
gene_precomp_matrix_fp <- args[4] # gene precomp matrix fp
grna_precomp_matrix_fp <- args[5] # grna precomp matrix fp
pair_to_pod_id_map_fp <- args[6] # pair to pod id map fp
pod_id <- as.integer(args[7]) # the pod id
threshold <- as.integer(args[8]) # threshold
B <- as.integer(args[9]) # B
side <- args[10] # sidedness of test
full_output <- as.logical(args[11]) # full_output
inference_method <- args[12]
# obtain the pairs to analyze and prepare data
pairs_to_analyze <- readRDS(pair_to_pod_id_map_fp) |>
dplyr::filter(pod_id == !!pod_id) |>
dplyr::select(gene_id, grna_group)
gene_ids <- as.character(pairs_to_analyze$gene_id)
grna_group_ids <- as.character(pairs_to_analyze$grna_group)
n_pairs <- nrow(pairs_to_analyze)
rm(pairs_to_analyze)
mm_odm <- read_multimodal_odm(c(gene_odm_fp, grna_odm_fp), multimodal_metadata_fp)
gene_odm <- mm_odm |> get_modality("gene")
grna_odm <- mm_odm |> get_modality("grna")
global_cell_covariates <- mm_odm |> get_cell_covariates() |> as.matrix()
rm(mm_odm)
###########################################################
# Iterate over pairs and apply pairwise test of association
###########################################################
binomial_obj <- binomial()
out_l <- vector(mode = "list", length = n_pairs)
for (i in seq(1, n_pairs)) {
gene_id <- gene_ids[i]
grna_group_id <- grna_group_ids[i]
print(paste0("Testing gene ", gene_id, " and gRNA group ", grna_group_id, "."))
# Load gene expressions and fitted means
if (i == 1 || gene_ids[i] != gene_ids[i - 1]) {
# get expressions and precomp
gene_expressions <- as.numeric(gene_odm[[gene_id,]])
gene_precomp <- fst::read_fst(gene_precomp_matrix_fp, gene_id) |> dplyr::pull()
if (inference_method == "gcm") {
gene_fitted_means <- exp((global_cell_covariates %*% gene_precomp)[,1])
gene_resids <- gene_expressions - gene_fitted_means
} else { # crt
gene_fitted_coefs <- gene_precomp[-length(gene_precomp)]
gene_theta <- gene_precomp[length(gene_precomp)]
gene_fitted_linear_components <- (global_cell_covariates %*% gene_fitted_coefs)[,1]
}
}
# Load grna indicators and fitted means
if (i == 1 || grna_group_ids[i] != grna_group_ids[i - 1]) {
# get indicators and fitted means
grna_group_fitted_coefs <- fst::read_fst(grna_precomp_matrix_fp, grna_group_id) |> dplyr::pull()
grna_group_fitted_means <- binomial_obj$linkinv((global_cell_covariates %*% grna_group_fitted_coefs)[,1])
grna_group_indicators <- ondisc::load_thresholded_and_grouped_grna(covariate_odm = grna_odm,
grna_group = grna_group_id,
threshold = threshold) |> as.integer()
if (inference_method == "gcm") {
grna_group_resids <- grna_group_indicators - grna_group_fitted_means
} else {
# sample the sparse matrix of grna presences/absences
synthetic_indicator_matrix <- sceptre:::generate_synthetic_grna_data(fitted_probs = grna_group_fitted_means, B = B)
}
}
# carry out the test
if (inference_method == "gcm") {
out <- sceptre:::run_sceptre_using_gcm(gene_resids = gene_resids,
gRNA_resids = grna_group_resids,
side = side)
} else { # crt
out <- sceptre:::run_sceptre_using_precomp_fast(expressions = gene_expressions,
gRNA_indicators = grna_group_indicators,
gRNA_precomp = synthetic_indicator_matrix,
side = side,
gene_precomp_size = gene_theta,
gene_precomp_offsets = gene_fitted_linear_components,
full_output = full_output)
}
# add to output list
out <- data.table::setDT(out) |>
dplyr::mutate(gene_id = factor(gene_id), grna_group = factor(grna_group))
out_l[[i]] <- out
}
for (i in seq(1, n_pairs)) {
gene_id <- gene_ids[i]
grna_group_id <- grna_group_ids[i]
print(paste0("Testing gene ", gene_id, " and gRNA group ", grna_group_id, "."))
# Load gene expressions and fitted means
if (i == 1 || gene_ids[i] != gene_ids[i - 1]) {
# get expressions and precomp
gene_expressions <- as.numeric(gene_odm[[gene_id,]])
gene_precomp <- fst::read_fst(gene_precomp_matrix_fp, gene_id) |> dplyr::pull()
if (inference_method == "gcm") {
gene_fitted_means <- exp((global_cell_covariates %*% gene_precomp)[,1])
gene_resids <- gene_expressions - gene_fitted_means
} else { # crt
gene_fitted_coefs <- gene_precomp[-length(gene_precomp)]
gene_theta <- gene_precomp[length(gene_precomp)]
gene_fitted_linear_components <- (global_cell_covariates %*% gene_fitted_coefs)[,1]
}
}
# Load grna indicators and fitted means
if (i == 1 || grna_group_ids[i] != grna_group_ids[i - 1]) {
# get indicators and fitted means
grna_group_fitted_coefs <- fst::read_fst(grna_precomp_matrix_fp, grna_group_id) |> dplyr::pull()
grna_group_fitted_means <- binomial_obj$linkinv((global_cell_covariates %*% grna_group_fitted_coefs)[,1])
grna_group_indicators <- ondisc::load_thresholded_and_grouped_grna(covariate_odm = grna_odm,
grna_group = grna_group_id,
threshold = threshold) |> as.integer()
if (inference_method == "gcm") {
grna_group_resids <- grna_group_indicators - grna_group_fitted_means
} else {
# sample the sparse matrix of grna presences/absences
synthetic_indicator_matrix <- sceptre:::generate_synthetic_grna_data(fitted_probs = grna_group_fitted_means, B = B)
}
}
# carry out the test
if (inference_method == "gcm") {
out <- sceptre:::run_sceptre_using_gcm(gene_resids = gene_resids,
gRNA_resids = grna_group_resids,
side = side)
} else { # crt
out <- sceptre:::run_sceptre_using_precomp_fast(expressions = gene_expressions,
gRNA_indicators = grna_group_indicators,
gRNA_precomp = synthetic_indicator_matrix,
side = side,
gene_precomp_size = gene_theta,
gene_precomp_offsets = gene_fitted_linear_components,
full_output = full_output)
}
# add to output list
out <- data.table::setDT(out) |>
dplyr::mutate(gene_id = factor(gene_id), grna_group = factor(grna_group_id))
out_l[[i]] <- out
}
out_l
raw_result <- data.table::rbindlist(out_l)
raw_result
raw_result <- data.table::rbindlist(out_l)
saveRDS(object = raw_result, file = "raw_result.rds")
raw_result
dplyr::relocate
?dplyr::relocate
setwd("/Users/timbarry/research_code/sceptre-pipeline")
crt <- readRDS("sceptre_result_crt.rds") |> na.omit()
gcm <- readRDS("sceptre_result_gcm.rds") |> na.omit()
crt
gcm
both <- dplyr::left_join(x = crt, y = gcm, by = c("gene_id", "grna_group"))
both
library(ggplot2)
?dplyr::left_join
both <- dplyr::left_join(x = crt, y = gcm, by = c("gene_id", "grna_group"), suffix = c("crt", "gcm"))
both
both <- dplyr::left_join(x = crt, y = gcm, by = c("gene_id", "grna_group"), suffix = c("_crt", "_gcm"))
head(both)
ggplot(data = both, mapping = aes(x = p_value_crt, y = p_value_gcm)) + geom_point()
cor(both$p_value_crt, both$p_value_gcm)
cor(both$p_value_crt, both$p_value_gcm)^2
sceptre_result_gcm <- readRDS("/Users/timbarry/research_code/sceptre-pipeline/sceptre_result_gcm.rds")
sceptre_result_gcm
crt <- readRDS("sceptre_result_crt.rds") |> na.omit()
gcm <- readRDS("sceptre_result_gcm.rds") |> na.omit()
both <- dplyr::left_join(x = crt, y = gcm, by = c("gene_id", "grna_group"), suffix = c("_crt", "_gcm"))
ggplot(data = both, mapping = aes(x = p_value_crt, y = p_value_gcm)) + geom_point()
cor(both$p_value_crt, both$p_value_gcm)^2
cor(both$p_value_crt, both$p_value_gcm)^2 + theme_bw()
ggplot(data = both, mapping = aes(x = p_value_crt, y = p_value_gcm)) + geom_point()+ theme_bw()
ggplot(data = both, mapping = aes(x = p_value_crt, y = p_value_gcm)) + geom_point() + theme_bw() + geom_abline(slope = 1, intercept = 0)
ggplot(data = both, mapping = aes(x = p_value_crt, y = p_value_gcm)) + geom_point() + theme_bw() + geom_abline(slope = 1, intercept = 0, col = "red")
