filter(target %in% targeted_genes) |>
select(grna_group, target) |>
rename(response_id = target)
response_grna_group_pairs
head(response_grna_group_pairs)
head(response_grna_group_pairs)
dplyr::
rownames_to_column
dataset_name
args <- "frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene schraivogel/ground_truth_perturbseq/gene schraivogel/ground_truth_tapseq/gene frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene schraivogel/ground_truth_perturbseq/gene schraivogel/ground_truth_tapseq/gene" |> .split_args()
args
# loop over datasets, outputting the positive control pairs
for (i in seq(1, length(datasets))) {
dataset_name <- datasets[i]
response_odm <- lowmoi::load_dataset_modality(data_fp = dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
# get the grna_group-response_id pairs
targeted_genes <- intersect(grna_odm |> ondisc::get_feature_covariates() |> dplyr::pull(target),
response_odm |> ondisc::get_feature_ids())
response_grna_group_pairs <- grna_odm |>
ondisc::get_feature_covariates() |>
tibble::rownames_to_column(var = "grna_group") |>
dplyr::filter(target %in% targeted_genes) |>
dplyr::select(grna_group, target) |>
dplyr::rename(response_id = target)
# save RDS
saveRDS(response_grna_group_pairs, paste0("pairs_", i))
}
datasets<- args
datasets
# loop over datasets, outputting the positive control pairs
for (i in seq(1, length(datasets))) {
dataset_name <- datasets[i]
response_odm <- lowmoi::load_dataset_modality(data_fp = dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
# get the grna_group-response_id pairs
targeted_genes <- intersect(grna_odm |> ondisc::get_feature_covariates() |> dplyr::pull(target),
response_odm |> ondisc::get_feature_ids())
response_grna_group_pairs <- grna_odm |>
ondisc::get_feature_covariates() |>
tibble::rownames_to_column(var = "grna_group") |>
dplyr::filter(target %in% targeted_genes) |>
dplyr::select(grna_group, target) |>
dplyr::rename(response_id = target)
# save RDS
saveRDS(response_grna_group_pairs, paste0("pairs_", i))
}
dataset_name <- datasets[i]
response_odm <- lowmoi::load_dataset_modality(data_fp = dataset_name)
i
dataset_name <- datasets[i]
dataset_name
datasets
datasets <- datasets |> unique()
datasets
dataset_name <- datasets[i]
dataset_name
lowmoi::get_grna_dataset_name
# loop over datasets, outputting the positive control pairs
out <- NULL
dataset_name <- datasets[i]
dataset_name
out
# loop over datasets, outputting the positive control pairs
out <- NULL
}
dataset_name <- datasets[i]
dataset_name
#!/usr/bin/env Rscript
sceptre2 <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
lowmoi::get_grna_dataset_name
dataset_name
sub("/[^/]*$", "", dataset_name)
paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "pos_control_pairs.rds")
paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds")
file.exists("/Users/timbarry/research_offsite/projects/sceptre2/data/frangieh/co_culture/pos_control_pairs.rds")
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
pos_control_df
my_idxs <- seq(1L, nrow(pos_control_df))
my_idxs
# loop over datasets, outputting the positive control pairs
out <- NULL
for (i in seq(1, length(datasets))) {
dataset_name <- datasets[i]
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
my_idxs <- seq(1L, nrow(pos_control_df))
out <- c(out, paste(dataset_name, my_grps))
}
for (i in seq(1, length(datasets))) {
dataset_name <- datasets[i]
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
my_idxs <- seq(1L, nrow(pos_control_df))
out <- c(out, paste(dataset_name, my_idxs))
}
# loop over datasets, outputting the positive control pairs
out <- NULL
for (i in seq(1, length(datasets))) {
dataset_name <- datasets[i]
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
my_idxs <- seq(1L, nrow(pos_control_df))
out <- c(out, paste(dataset_name, my_idxs))
}
out
# write to disk
file_con <- file("dataset_names_raw.txt")
writeLines(out, file_con)
close(file_con)
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
"schraivogel/enhancer_screen_chr8/gene 45 schraivogel_method assignment" |> .split_args()
args <- "schraivogel/enhancer_screen_chr8/gene 45 schraivogel_method assignment" |> .split_args()
args
dataset_name <- args[1]
dataset_name
idx <- as.integer(args[2])
idx
method_name <- args[3]
method_name
grna_modality <- args[4]
grna_modality
length(args) >= 5
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
response_odm
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
grna_odm
response_odm
grna_odm
# add additional arguments, if necessary
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm_swapped, response_grna_group_pairs = response_grna_group_pairs)
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
pos_control_df <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
pos_control_df
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
head(response_grna_group_pairs)
response_grna_group_pairs
idx
response_grna_group_pairs <- response_grna_group_pairs|> dplyr::slice(idx)
response_grna_group_pairs
# add additional arguments, if necessary
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm_swapped, response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
# add additional args
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm_swapped, response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
# add additional args
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm_swapped, response_grna_group_pairs = response_grna_group_pairs)
# add additional args
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm, response_grna_group_pairs = response_grna_group_pairs)
to_pass_list
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list
optional_args
method_name
to_pass_list
result_df <- do.call(what = method_name, args = to_pass_list)
method_name
if (!identical(sort(colnames(result_df)), c("grna_group", "p_value", "response_id"))) {
stop(paste0("The output of `", method_name, "` must be a data frame with columns `response_id`, `grna_group`, and `p_value`."))
}
# add columns indicating the undercover grna, dataset name, and method name
out <- result_df |>
dplyr::mutate(undercover_grna = undercover_ntc_name_in, grna_group = NULL, dataset = dataset_name, method = method_name) |>
dplyr::mutate_at(.vars = c("response_id", "undercover_grna", "dataset", "method"), .funs = factor)
# save result
saveRDS(object = out, file = "raw_result.rds")
dataset_name
"schraivogel/ground_truth_tapseq/gene 0 nb_regression assignment progress=FALSE" |> .split_args()
args <- "schraivogel/ground_truth_tapseq/gene 0 nb_regression assignment progress=FALSE" |> .split_args()
args
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
grna_modality <- args[4]
grna_modality
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, sub("/[^/]*$", "", dataset_name), "/pos_control_pairs.rds"))
if (idx > 0) {
response_grna_group_pairs <- response_grna_group_pairs|> dplyr::slice(idx)
}
response_odm
grna_dataset_name
grna_odm
response_grna_group_pairs
# add additional args
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm, response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
to_pass_list[[1]]
to_pass_list[[2]]
to_pass_list[[3]]
to_pass_list[[4]]
result_df <- do.call(what = method_name, args = to_pass_list)
to_pass_list
to_pass_list$response_odm
to_pass_list$grna_odm
to_pass_list$response_grna_group_pairs
to_pass_list$progress
to_pass_list$response_odm[[1,]]
to_pass_list$response_odm[[,1]]
to_pass_list$grna_odm[[,1]]
to_pass_list$grna_odm[[1,]]
to_pass_list$grna_odm[[2,]]
to_pass_list$grna_odm[[3,]]
to_pass_list$grna_odm[[4,]]
to_pass_list$grna_odm[[5,]]
result_df <- do.call(what = method_name, args = to_pass_list)
method_name
to_pass_list$response_odm
method_name
to_pass_list$grna_odm
to_pass_list$response_grna_group_pairs
to_pass_list$progress
response_odm <- to_pass_list$response_odm
grna_odm <- to_pass_list$grna_odm
response_grna_group_pairs <- to_pass_list$response_grna_group_pairs
head(response_grna_group_pairs)
progress = TRUE
to_pass_list$progress
if (is.character(progress)) progress <- as.logical(progress)
# obtain cell covariate data frame
cell_covariate_df <- response_odm |> ondisc::get_cell_covariates()
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str, " + pert_indicator"))
# define the NB regression test function
two_sample_test <- function(target_cells, control_cells, target_cell_indices, control_cell_indices) {
# construct the data matrix to pass to GLM
df_left <- data.frame(expression = c(target_cells, control_cells),
pert_indicator = c(rep(1, length(target_cells)),
rep(0, length(control_cells))))
df_right <- rbind(cell_covariate_df[target_cell_indices,], cell_covariate_df[control_cell_indices,])
df <- cbind(df_left, df_right)
# first, use aux function to estimate size
est_size <- max(estimate_size(df, my_formula), 0.01)
# fit GLM
fit_nb <- VGAM::vglm(formula = my_formula, family = VGAM::negbinomial.size(est_size), data = df)
# extract p-value
s <- VGAM::summary(fit_nb)
p_val <- s@coef3["pert_indicator", "Pr(>|z|)"]
return(p_val)
}
# run the NB regression on all the data
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
abstract_two_sample_test
response_odm
grna_odm
response_grna_group_pairs
two_sample_test
progress
set.seed(4)
# get grna assignments and target assignments; obtain indices of NT cells
grna_targets <- get_target_assignments_via_max_op(grna_odm)
control_cell_indices <- which(grna_targets == "non-targeting")
r <- response_grna_group_pairs[1,]
r
grna_group <- as.character(r[["grna_group"]])
grna_group
target_cell_indices <- grna_targets == grna_group
target_cell_indices
sum(target_cell_indices)
grna_targets
# get grna assignments and target assignments; obtain indices of NT cells
grna_targets <- get_target_assignments_via_max_op(grna_odm)
control_cell_indices <- which(grna_targets == "non-targeting")
control_cell_indices
set.seed(4)
# get grna assignments and target assignments; obtain indices of NT cells
grna_targets <- get_target_assignments_via_max_op(grna_odm)
control_cell_indices <- which(grna_targets == "non-targeting")
grna_targets
control_cell_indices
head(control_cell_indices)
# get grna assignments and target assignments; obtain indices of NT cells
grna_targets <- get_target_assignments_via_max_op(grna_odm)
grna_targets
control_cell_indices <- which(grna_targets == "non-targeting")
control_cell_indices
r
grna_group <- as.character(r[["grna_group"]])
grna_group
grna_targets
grna_group %in% grna_targets
grna_odm
grna_odm |> get_feature_ids()
grna_group
grna_group %in% get_feature_ids(grna_odm)
# get grna assignments and target assignments; obtain indices of NT cells
grna_targets <- get_target_assignments_via_max_op(grna_odm)
grna_odm
control_cell_indices <- which(grna_targets == "non-targeting")
control_cell_indices
sum(control_cell_indices)
length(control_cell_indices)
r
grna_group <- as.character(r[["grna_group"]])
grna_group
grna_targets
grna_group
grna_group %in% grna_targets
grna_odm |> get_feature_covariates() |> head()
grna_odm |> get_cell_covariates() |> head()
grna_odm |> get_cell_covariates() |> head() |> dplyr::pull(assiged_grna)
grna_odm |> get_cell_covariates() |> head() |> dplyr::pull(assigned_grna)
grna_odm |> get_cell_covariates() |> dplyr::pull(assigned_grna)
assigned_grnas <- grna_odm |> get_cell_covariates() |> dplyr::pull(assigned_grna)
grna_targets
r
r$grna_group
r$grna_group %in% assigned_grnas
grna_odm
r$grna_group
assigned_grnas |> head(20)
head(grna_targets, 20)
library(ggplot2)
crt <- readRDS("sceptre_result_crt.rds") |> na.omit()
setwd("/Users/timbarry/research_code/sceptre-pipeline")
crt <- readRDS("sceptre_result_crt.rds") |> na.omit()
gcm <- readRDS("sceptre_result_gcm.rds") |> na.omit()
crt
gcm
both <- dplyr::left_join(x = crt, y = gcm, by = c("gene_id", "grna_group"), suffix = c("_crt", "_gcm"))
ggplot(data = both, mapping = aes(x = p_value_crt, y = p_value_gcm)) + geom_point() + theme_bw() + geom_abline(slope = 1, intercept = 0, col = "red")
cor(both$p_value_crt, both$p_value_gcm)^2
fam
sceptre:::run_gene_precomputation_v2
ondisc::load_thresholded_and_grouped_grna
sceptre:::run_grna_precomputation_v2
global_cell_covariates
gasp_offsite_dir <- .get_config_path("LOCAL_GASPERINI_2019_DATA_DIR")
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/multimodal_metadata.rds")
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/multimodal_metadata.rds")
gene_odm_fp <- paste0(gasp_offsite_dir, "at-scale/processed/gene/gasp_scale_gene_expressions.odm")
grna_odm_fp <- paste0(gasp_offsite_dir, "at-scale/processed/grna_ungrouped/gasp_scale_grna_counts_ungrouped.odm")
pair_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/pairs.rds")
# in R
library(ondisc)
# in R
library(ondisc)
crispr_experiment <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = multimodal_metadata_fp)
c(gene_odm_fp, grna_odm_fp)
multimodal_metadata_fp
crispr_experiment <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = multimodal_metadata_fp)
gene_odm_fp
grna_odm_fp
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# in R
gasp_offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/multimodal_metadata.rds")
gene_odm_fp <- paste0(gasp_offsite_dir, "at-scale/processed/gene/gasp_scale_gene_expressions.odm")
grna_odm_fp <- paste0(gasp_offsite_dir, "at-scale/processed/grna_ungrouped/gasp_scale_grna_counts_ungrouped.odm")
pair_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/pairs.rds")
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# in R
gasp_offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/gasperini/at_scale/")
# in R
gasp_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/gasperini/at_scale/")
dir.exists(gasp_offsite_dir)
# in R
gasp_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/gasperini/at_scale/")
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/multimodal_metadata.rds")
gasp_offsite_dir
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "at-scale/processed/multimodal/multimodal_metadata.rds")
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "gene/metadata_qc.rds")
multimodal_metadata_fp
# in R
gasp_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/gasperini/at_scale/")
gasp_offsite_dir
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "multimodal_metadata.rds")
multimodal_metadata_fp
# in R
gasp_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/gasperini/at_scale/")
gasp_offsite_dir
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "multimodal_metadata.rds")
multimodal_metadata_fp
file.exists(multimodal_metadata_fp)
gene_odm_fp <- paste0(gasp_offsite_dir, "gene/metadata_qc.rds")
file.exists(gene_odm_fp)
grna_odm_fp <- paste0(gasp_offsite_dir, "grna_expression/metadata_qc.rds")
file.exists(grna_odm_fp)
pair_fp <- paste0(gasp_offsite_dir, "neg_control_pairs.rds")
pair_fp
# in R
library(ondisc)
crispr_experiment <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = multimodal_metadata_fp)
c(gene_odm_fp, grna_odm_fp)
# in R
gasp_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/gasperini/at_scale/")
multimodal_metadata_fp <- paste0(gasp_offsite_dir, "multimodal_metadata.rds")
gene_odm_fp <- paste0(gasp_offsite_dir, "gene/matrix.odm")
grna_odm_fp <- paste0(gasp_offsite_dir, "grna_expression/matrix.odm")
pair_fp <- paste0(gasp_offsite_dir, "neg_control_pairs.rds")
# in R
library(ondisc)
crispr_experiment <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = multimodal_metadata_fp)
crispr_experiment
gene_modality <- get_modality(crispr_experiment, "gene")
grna_modality <- get_modality(crispr_experiment, "grna")
# in R
grna_modality
grna_modality |>
get_feature_covariates() |>
head()
# in R
grna_modality
grna_modality
grna_modality <- get_modality(crispr_experiment, "grna_expression")
grna_modality
# in R
grna_modality
grna_modality |>
get_feature_covariates() |>
head()
gene_modality
pairs_df <- readRDS(pair_fp)
head(pairs_df)
all(pairs_df$gene_id %in% get_feature_ids(gene_modality)) # gene ID check
all(pairs_df$grna_group  %in% get_feature_covariates(grna_modality)$grna_group) # gRNA group check
# in R
crispr_experiment |> get_cell_covariates() |> head()
200000/10000
200000/1000
200000/5000
5000 * 3
(5000 * 3)/60^2
(5000 * 3)/(60^2)
200000/5000
10000/100
10000/200
